services:
    _defaults:
        autowire: true
        autoconfigure: true
        public: false
        bind:
            $rootDirectory: '%kernel.root_dir%'
            $webRootDir: '%kernel.root_dir%/../public'
            $staticmapsHost: '%staticmaps.host%'
            $gapWidth: '%track.gap_width%'
            $facebookAppId: '%facebook.app_id%'
            $facebookAppSecret: '%facebook.app_secret%'
            $facebookDefaultToken: '%facebook.default_token%'
            $twitterClientId: '%twitter.client_id%'
            $twitterSecret: '%twitter.secret%'
            $uploadDestinationPhoto: '%upload_destination.photo%'
            $uploadDestinationTrack: '%upload_destination.track%'
            $uploadDestinationUserPhoto: '%upload_destination.user_photo%'
            $stravaClientId: '%strava.client_id%'
            $stravaSecret: '%strava.secret%'
            $cachedTimelineTtl: '%timeline.ttl%'
            $projectDirectory: '%kernel.project_dir%'
            $redisUrl: '%env(REDIS_URL)%'
            $criticalmassRideGeneratorUrl: '%env(CRITICALMASS_RIDE_GENERATOR_URL)%'
            $instagramScraperProxyServerAddress: '%env(INSTAGRAM_SCRAPER_PROXY_ADDRESS)%'
            $instagramScraperProxyServerPort: '%env(INSTAGRAM_SCRAPER_PROXY_PORT)%'

    App\:
        resource: '../src/*'
        exclude: '../src/{DQL,Entity,Manager,Menu,Migrations,Model,Repository,Tests,UserProvider,Criticalmass/UploadValidator/UploadValidatorException}'

    App\Controller\:
        resource: '../src/Controller'
        public: true
        tags: ['controller.service_arguments']

    Symfony\Component\Routing\RouteCollection: ~

    Sonata\SeoBundle\Seo\SeoPageInterface:
        alias: sonata.seo.page.default

    App\Criticalmass\Geocoding\ReverseGeocoderInterface:
        alias: App\Criticalmass\Geocoding\CachedReverseGeocoder

    App\Criticalmass\Website\Obfuscator\ObfuscatorInterface:
        alias: App\Criticalmass\Website\Obfuscator\CaseAwareObfuscator

    App\Criticalmass\Timeline\TimelineInterface:
        alias: App\Criticalmass\Timeline\CachedTimeline
        #alias: App\Criticalmass\Timeline\Timeline

    App\Criticalmass\Geo\Loop\LoopInterface:
        alias: App\Criticalmass\Geo\Loop\TrackLoop

    App\Criticalmass\Imagine\DataLoader\RemoteStreamLoader:
        arguments: ['@liip_imagine']
        tags:
            - { name: liip_imagine.binary.loader, loader: App\Criticalmass\Imagine\DataLoader\RemoteStreamLoader }

    App\Criticalmass\Imagine\CacheResolver\RemoteCacheResolver:
        tags:
            - { name: liip_imagine.cache.resolver, resolver: App\Criticalmass\Imagine\CacheResolver\RemoteCacheResolver }

    App\Criticalmass\ViewStorage\Cache\RobustViewStorageCache:
        arguments:
            $producer: '@old_sound_rabbit_mq.criticalmass_view_producer'

    App\Criticalmass\ViewStorage\Cache\ViewStorageCache:
        arguments:
            $producer: '@old_sound_rabbit_mq.criticalmass_view_producer'

    App\Criticalmass\MassTrackImport\MassTrackImporter:
        arguments:
            $producer: '@old_sound_rabbit_mq.criticalmass_trackimportcandidate_producer'

    App\Criticalmass\UploadableDataHandler\UploadableDataHandlerInterface:
        alias: App\Criticalmass\UploadableDataHandler\UploadableDataHandler

    App\Criticalmass\ViewStorage\Cache\ViewStorageCacheInterface:
        alias: App\Criticalmass\ViewStorage\Cache\RobustViewStorageCache

    App\Criticalmass\ElasticCityFinder\ElasticCityFinder:
        arguments:
            $finder: '@fos_elastica.finder.criticalmass_city'

    App\Serializer\JMSSerializer\Handler\RelationHandler:
        tags:
            - { name: jms_serializer.handler, type: Relation, direction: serialization, format: json, method: serializeRelation}
            - { name: jms_serializer.handler, type: Relation, direction: deserialization, format: json, method: deserializeRelation}
            - { name: jms_serializer.handler, type: Relation<?>, direction: serialization, format: json, method: serializeRelation}
            - { name: jms_serializer.handler, type: Relation<?>, direction: deserialization, format: json, method: deserializeRelation}

    jms_serializer.naming_strategy:
        alias: jms_serializer.camel_case_naming_strategy

    App\Criticalmass\ViewStorage\BlackList\BlackList:
        arguments:
            $crawlerDetect: '@crawler_detect'

    App\Form\Type\RegistrationType:
        arguments:
            $class: '%fos_user.model.user.class%'

    App\Criticalmass\Corona\ResultFetcher\ResultFetcherInterface:
        alias: App\Criticalmass\Corona\ResultFetcher\CachedResultFetcher

    App\Criticalmass\CriticalmassBlog\CriticalmassBlogInterface:
        alias: App\Criticalmass\CriticalmassBlog\CachedCriticalmassBlog

    App\Controller\Search\SearchController:
        arguments:
            $cityFinder: '@fos_elastica.finder.criticalmass_city'
            $rideFinder: '@fos_elastica.finder.criticalmass_ride'

    App\Criticalmass\Image\ExifWrapper\ExifWrapper:
        arguments:
            $flysystemFilesystem: '@oneup_flysystem.flysystem_photo_photo_filesystem'

    App\Criticalmass\Image\PhotoManipulator\Storage\PhotoStorage:
        arguments:
            $filesystem: '@oneup_flysystem.flysystem_photo_photo_filesystem'

    App\Criticalmass\Image\PhotoUploader\PhotoUploader:
        arguments:
            $filesystem: '@oneup_flysystem.flysystem_photo_photo_filesystem'

    App\Criticalmass\Geo\GpxReader\GpxReader:
        arguments:
            $filesystem: '@oneup_flysystem.flysystem_track_track_filesystem'

    App\Criticalmass\Geo\GpxReader\TrackReader:
        arguments:
            $filesystem: '@oneup_flysystem.flysystem_track_track_filesystem'

    App\Criticalmass\Geo\GpxWriter\GpxWriter:
        arguments:
            $filesystem: '@oneup_flysystem.flysystem_track_track_filesystem'

    App\Criticalmass\ProfilePhotoGenerator\ProfilePhotoGenerator:
        arguments:
            $filesystem: '@oneup_flysystem.flysystem_user_photo_filesystem'

    App\Criticalmass\UploadableDataHandler\UploadableDataHandler:
        arguments:
            $filesystem: '@oneup_flysystem.flysystem_photo_photo_filesystem'

    App\Criticalmass\UploadValidator\TrackValidator:
        arguments:
            $filesystem: '@oneup_flysystem.flysystem_track_track_filesystem'
